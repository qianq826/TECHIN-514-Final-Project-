#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

static BLEUUID serviceUUID("7707f49f-d3fe-4f1b-8e7e-aed9b84d897b");
static BLEUUID charUUID("e51ac1b4-002b-478c-a130-5bf86221ba97");
bool doConnect = false;
bool connected = false;
BLEAdvertisedDevice* myDevice;

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    connected = true;
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    Serial.println("Disconnected");
  }
};

void notifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
  Serial.println("Notify callback for characteristic ");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Received Data:");
  pData[length] = 0; // Ensure string is null-terminated
  display.println((char*)pData);
  display.display();
}

bool connectToServer(BLEAdvertisedDevice* myDevice) {
  BLEClient* pClient = BLEDevice::createClient();
  Serial.println(" - Created client");

  pClient->setClientCallbacks(new MyClientCallback());
  // Connect to the BLE Server.
  pClient->connect(myDevice); 
  Serial.println(" - Connected to server");

  BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
  if (pRemoteService == nullptr) {
    Serial.print("Failed to find our service UUID: ");
    pClient->disconnect();
    return false;
  }
  Serial.println(" - Found our service");

  BLERemoteCharacteristic* pRemoteCharacteristic = pRemoteService->getCharacteristic(charUUID);
  if (pRemoteCharacteristic == nullptr) {
    Serial.print("Failed to find our characteristic UUID: ");
    pClient->disconnect();
    return false;
  }
  Serial.println(" - Found our characteristic");

  if(pRemoteCharacteristic->canNotify())
    pRemoteCharacteristic->registerForNotify(notifyCallback);

  return true;
}

void setup() {
  Serial.begin(115200);
  BLEDevice::init("");

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.display();

  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setActiveScan(true); // Active scan uses more power, but get results faster
  BLEScanResults foundDevices = pBLEScan->start(5, false);
  for (int i = 0; i < foundDevices.getCount(); i++) {
    BLEAdvertisedDevice advertisedDevice = foundDevices.getDevice(i);
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.getServiceUUID().equals(serviceUUID)) {
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      break;
    }
  }
  if (myDevice != nullptr) {
    connectToServer(myDevice);
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  delay(2000); // Consider your application's needs
}
