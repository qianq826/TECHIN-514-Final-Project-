#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
Adafruit_BNO055 bno = Adafruit_BNO055(55);

bool isRecording = false;
bool initialRead = true; // Flag to capture initial sensor reading
float movementThreshold = 10.0; // Threshold for significant movement, adjust based on your testing
imu::Vector<3> initialEuler; // To store the initial Euler angles
imu::Vector<3> initialAccel; // To store the initial acceleration

// Function prototypes
void logData(const imu::Vector<3>& euler, const imu::Vector<3>& accel);
void calculateAndLogDifferences(const imu::Vector<3>& initialEuler, const imu::Vector<3>& finalEuler, const imu::Vector<3>& initialAccel, const imu::Vector<3>& finalAccel);

void setup() {
  Serial.begin(115200);
  
  if(!bno.begin()) {
    Serial.println("No BNO055 detected");
    while(1);
  }
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  display.display();
  delay(2000); // Show initial screen
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
}

void loop() {
  // Read accelerometer data for movement detection
  imu::Vector<3> currentAccel = bno.getVector(Adafruit_BNO055::VECTOR_LINEARACCEL);
  imu::Vector<3> currentEuler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  float accelMagnitude = sqrt(currentAccel.x()*currentAccel.x() + currentAccel.y()*currentAccel.y() + currentAccel.z()*currentAccel.z());

  // Detect start of significant movement
  if (accelMagnitude > movementThreshold && !isRecording) {
    isRecording = true;
    initialRead = true; // Flag to capture initial readings
    Serial.println("Start Movement Detected");
  }

  // Record initial readings at the start of movement
  if (isRecording && initialRead) {
    initialEuler = currentEuler;
    initialAccel = currentAccel;
    initialRead = false;
  }

  // Log data during significant movement
  if (isRecording) {
    logData(currentEuler, currentAccel);
  }

  // Detect end of movement and log differences
  if (accelMagnitude < movementThreshold && isRecording) {
    isRecording = false;
    Serial.println("End Movement Detected");
    calculateAndLogDifferences(initialEuler, currentEuler, initialAccel, currentAccel);
  }

  delay(100); // Short delay to control loop execution rate
}

// Log current data
void logData(const imu::Vector<3>& euler, const imu::Vector<3>& accel) {
  Serial.print("Euler X: ");
  Serial.print(euler.x());
  Serial.print(", Y: ");
  Serial.print(euler.y());
  Serial.print(", Z: ");
  Serial.print(euler.z());
  Serial.print(" | Accel X: ");
  Serial.print(accel.x());
  Serial.print(", Y: ");
  Serial.print(accel.y());
  Serial.print(", Z: ");
  Serial.println(accel.z());
}

// Calculate and log the differences in readings
void calculateAndLogDifferences(const imu::Vector<3>& initialEuler, const imu::Vector<3>& finalEuler, const imu::Vector<3>& initialAccel, const imu::Vector<3>& finalAccel) {
  Serial.print("Delta Euler X: ");
  Serial.print(finalEuler.x() - initialEuler.x());
  Serial.print(", Delta Y: ");
  Serial.print(finalEuler.y() - initialEuler.y());
  Serial.print(", Delta Z: ");
  Serial.print(finalEuler.z() - initialEuler.z());
  Serial.print(" | Delta Accel X: ");
  Serial.print(finalAccel.x() - initialAccel.x());
  Serial.print(", Y: ");
  Serial.print(finalAccel.y() - initialAccel.y());
  Serial.print(", Z: ");
  Serial.println(finalAccel.z() - initialAccel.z());
} 
